#include <FastLED.h>

FASTLED_USING_NAMESPACE
#define ARRAY_SIZE(A) (sizeof(A) / sizeof((A)[0]))
#define DATA_PIN 13
#define LED_TYPE WS2812
#define COLOR_ORDER RGB
#define NUM_LEDS 170*2
#define BRIGHTNESS 255

CRGB leds[NUM_LEDS];

void rainbow();
void confetti();
void sinelon();
void juggle();
void fire2012();
void bpm();
void blendwave();
void blur();
void bpm2();
void nextPattern();
void addGlitter(fract8 chance);

// List of patterns to cycle through.  Each is defined as a separate function
// below.
typedef void (*SimplePatternList[])();
SimplePatternList gPatterns = {rainbow, confetti,  sinelon, juggle, fire2012,
                               bpm,     blendwave, blur,    bpm2};
// Index number of which pattern is current
uint8_t gCurrentPatternNumber = 0;
// rotating "base color" used by many of the patterns
uint8_t gHue = 0;

// animation moving or staying
bool gMoving = true;
bool gOff = false;
bool gSolid = true;
bool gGlitter = false;
CRGB gColor = CRGB(255, 255, 255);

void setup() {
  delay(1000);
  Serial.begin(9600);

  // tell FastLED about the LED strip configuration
  FastLED.addLeds<LED_TYPE, DATA_PIN, COLOR_ORDER>(leds, NUM_LEDS)
      .setCorrection(TypicalLEDStrip);
  // set master brightness control
  FastLED.setBrightness(BRIGHTNESS);
}

void loop() {
  // no need to update all the time
  EVERY_N_MILLISECONDS(40) {
    // Call the current pattern function once, updating the 'leds' array
    if (gOff) {
      fadeToBlackBy(leds, NUM_LEDS, 3);
    } else {
      if (gSolid) {
        fill_solid(leds, NUM_LEDS, gColor);
      } else {
        gPatterns[gCurrentPatternNumber]();
      }
      if (gGlitter) {
        addGlitter(80);
      }
    }
    FastLED.show();
    // slowly cycle the "base color" through the rainbow
    gHue++;
  }
  EVERY_N_SECONDS(10) {
    gSolid = false;
    if (gMoving) {
      nextPattern();
    }
  }
}

void nextPattern() {
  // add one to the current pattern number, and wrap around at the end
  gCurrentPatternNumber = (gCurrentPatternNumber + 1) % ARRAY_SIZE(gPatterns);
}

void rainbow() {
  // FastLED's built-in rainbow generator
  fill_rainbow(leds, NUM_LEDS, gHue, 7);
}

void addGlitter(fract8 chanceOfGlitter) {
  if (random8() < chanceOfGlitter) {
    leds[random16(NUM_LEDS)] += CRGB::White;
  }
}

void confetti() {
  // random colored speckles that blink in and fade smoothly
  fadeToBlackBy(leds, NUM_LEDS, 10);
  int pos = random16(NUM_LEDS);
  leds[pos] += CHSV(gHue + random8(64), 200, 255);
}

void sinelon() {
  // a colored dot sweeping back and forth, with fading trails
  fadeToBlackBy(leds, NUM_LEDS, 20);
  int pos = beatsin16(13, 0, NUM_LEDS - 1);
  leds[pos] += CHSV(gHue, 255, 192);
}

void juggle() {
  // eight colored dots, weaving in and out of sync with each other
  fadeToBlackBy(leds, NUM_LEDS, 20);
  byte dothue = 0;
  for (int i = 0; i < 8; i++) {
    leds[beatsin16(i + 7, 0, NUM_LEDS - 1)] |= CHSV(dothue, 200, 255);
    dothue += 32;
  }
}

void bpm() {
  // colored stripes pulsing at a defined Beats-Per-Minute (BPM)
  uint8_t BeatsPerMinute = 62;
  CRGBPalette16 palette = PartyColors_p;
  uint8_t beat = beatsin8(BeatsPerMinute, 64, 255);
  for (int i = 0; i < NUM_LEDS; i++) {  // 9948
    leds[i] = ColorFromPalette(palette, gHue + (i * 2), beat - gHue + (i * 10));
  }
}

void bpm2() {
  // colored stripes pulsing at a defined Beats-Per-Minute (BPM)
  uint8_t BeatsPerMinute = 30;
  CRGBPalette16 palette = OceanColors_p;
  uint8_t beat = beatsin8(BeatsPerMinute, 64, 255);
  for (int i = 0; i < NUM_LEDS; i++) {  // 9948
    leds[i] = ColorFromPalette(palette, gHue + (i * 2), beat - gHue + (i * 10));
  }
}

// COOLING: How much does the air cool as it rises?
// Less cooling = taller flames.  More cooling = shorter flames.
// Default 50, suggested range 20-100
#define COOLING 55

// SPARKING: What chance (out of 255) is there that a new spark will be lit?
// Higher chance = more roaring fire.  Lower chance = more flickery fire.
// Default 120, suggested range 50-200.
#define SPARKING 120

void fire2012() {
  // Array of temperature readings at each simulation cell
  static byte heat[NUM_LEDS];

  // Step 1.  Cool down every cell a little
  for (int i = 0; i < NUM_LEDS; i++) {
    heat[i] = qsub8(heat[i], random8(0, ((COOLING * 10) / NUM_LEDS) + 2));
  }

  // Step 2.  Heat from each cell drifts 'up' and diffuses a little
  for (int k = NUM_LEDS - 1; k >= 2; k--) {
    heat[k] = (heat[k - 1] + heat[k - 2] + heat[k - 2]) / 3;
  }

  // Step 3.  Randomly ignite new 'sparks' of heat near the bottom
  if (random8() < SPARKING) {
    int y = random8(7);
    heat[y] = qadd8(heat[y], random8(160, 255));
  }

  // Step 4.  Map from heat cells to LED colors
  for (int j = 0; j < NUM_LEDS; j++) {
    CRGB color = HeatColor(heat[j]);
    int pixelnumber;
    if (false) {
      pixelnumber = (NUM_LEDS - 1) - j;
    } else {
      pixelnumber = j;
    }
    leds[pixelnumber] = color;
  }
}

void blendwave() {
  CRGB clr1;
  CRGB clr2;
  uint8_t speed;
  uint8_t loc1;

  speed = beatsin8(6, 0, 255);

  clr1 = blend(CHSV(beatsin8(3, 0, 255), 255, 255),
               CHSV(beatsin8(4, 0, 255), 255, 255), speed);
  clr2 = blend(CHSV(beatsin8(4, 0, 255), 255, 255),
               CHSV(beatsin8(3, 0, 255), 255, 255), speed);

  loc1 = beatsin8(10, 0, NUM_LEDS - 1);

  fill_gradient_RGB(leds, 0, clr2, loc1, clr1);
  fill_gradient_RGB(leds, loc1, clr2, NUM_LEDS - 1, clr1);
}

void blur() {
  uint8_t blurAmount = dim8_raw(beatsin8(
      3, 64, 192));  // A sinewave at 3 Hz with values ranging from 64 to 192.
  blur1d(leds, NUM_LEDS,
         blurAmount);  // Apply some blurring to whatever's already on the
                       // strip, which will eventually go black.

  uint8_t i = beatsin8(9, 0, NUM_LEDS);
  uint8_t j = beatsin8(7, 0, NUM_LEDS);
  uint8_t k = beatsin8(5, 0, NUM_LEDS);

  // The color of each point shifts over time, each at a different speed.
  uint16_t ms = millis();
  leds[(i + j) / 2] = CHSV(ms / 29, 200, 255);
  leds[(j + k) / 2] = CHSV(ms / 41, 200, 255);
  leds[(k + i) / 2] = CHSV(ms / 73, 200, 255);
  leds[(k + i + j) / 3] = CHSV(ms / 53, 200, 255);
}

// milliamps
// 3 off  7
// 3 white 140
// 2 white 96
// 1 white 50
// all g   52
// all r   52
// all b   52
