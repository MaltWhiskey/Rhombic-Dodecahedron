#define FASTLED_ESP32_I2S true
#include <ArduinoJson.h>
#include <ArduinoOTA.h>
#include <ESPmDNS.h>
#include <FastLED.h>
#include <HTTPClient.h>
#include <WiFi.h>
#include <WiFiUdp.h>

/******************************************************************************
 * How to order and travel around a rhombic dodecahedron. A easy method
 * deviced by Malt Whiskey. No difficult math involved.
 *
 * 12 faces
 * 24 edges
 * 14 vertices
 *
 * Rotate the object with a vertex that has 3 faces to the top.
 * This is point A. At this point 3 data in are connected.
 * All points connected to A are BCD. Going sideways down from
 * BCD are EFG. Going straight down from BCD are HIJ. Going straight
 * down from EFG are KLM. N is the bottom.
 *
 *            A
 *       /    |    \
 *      B     C     D
 *     /|\   /|\   /|\
 *      | \E/ | \F/ | \G/
 *     /H\ | /I\ | /J\ |
 *        \|/   \|/   \|/
 *         K     L     M
 *          \    |    /
 *               N
 *
 * Led strips can't bend sideways, but they can bend in or out. On a vertex
 * with 4 faces the led strip continues by bending slightly inwards. Since
 * this is a crossing one strip is on top and one is on the bottom.
 *
 * On a vertex with 3 faces there is a wire bridge, so there aren't any leds
 * on these corners. These corners are also end points so 1 strip stops here
 * and another goes past here with a wire bridge. The data line will jump here
 * from the strip end to another 3 faced vertex.
 *
 * All physical led strips segments are 85 leds and start on a 3 faced vertex.
 * This means 42 leds on an edge, than the middle led in the corner of a 4
 * faced vertex, than 42 leds an the other edge, than a bridge on a 3 faced
 * vertex. Repeat 85 leds same way. The last led is an end point with a data
 * jump to another 3 faced vertex. Repeat again except the last led has no jump
 *
 * So: 85 leds, bend, 85 leds, jump, 85 leds, bend, 85 leds, stop. This will
 * cover 8 edges with 340 leds. This covers 1/3 of the dodecahedron, so 1020
 * leds are needed in total.
 *
 * To travel all edges / all leds the strips are layed out in the order seen
 * in the diagram. This is the 2D map of the object.
 */
const char* ssid = "-^..^-";
const char* password = "qazwsxedc";
const char* hostname = "Infinity";

const uint8_t A1_PIN = 32;
const uint8_t A2_PIN = 12;
const uint8_t A3_PIN = 27;
const uint8_t A5_PIN = 16;
const uint8_t A6_PIN = 17;
const uint8_t A7_PIN = 26;
const uint8_t RELAY_PIN = 33;

const uint16_t PIXELS = 340;
CRGB leds[PIXELS * 6];
void setupDodecahedron();

class Dodecahedron {
 public:
  const static uint8_t edges = 24;
  const static uint8_t vertices = 14;

  struct Edge {
    uint8_t node[2];
    uint16_t led[2];
  };

  struct Connection {
    uint8_t faces;
    uint8_t nodes[4];
  };

  struct Wisp {
    uint8_t edge;
    uint8_t position;
    uint8_t from;
    CRGB color;
  };

  // Beware leds on the 4 faced vertices are on 2 edges. The 3 faced vertices
  // have no leds on them. Not all edges are equal length. Calibrate visually.
  Edge Edges[edges] = {
      {{'A', 'B'}, {0, 42}},    {{'B', 'H'}, {42, 84}},      // DIN1
      {{'H', 'K'}, {85, 127}},  {{'K', 'I'}, {127, 169}},    //
      {{'E', 'K'}, {170, 212}}, {{'K', 'N'}, {212, 254}},    //
      {{'N', 'L'}, {255, 297}}, {{'L', 'F'}, {297, 339}},    //
      {{'A', 'C'}, {340, 382}}, {{'C', 'I'}, {382, 424}},    // DIN2
      {{'I', 'L'}, {425, 467}}, {{'L', 'J'}, {467, 509}},    //
      {{'N', 'M'}, {510, 552}}, {{'M', 'G'}, {552, 594}},    //
      {{'G', 'D'}, {595, 637}}, {{'D', 'F'}, {637, 679}},    //
      {{'A', 'D'}, {680, 722}}, {{'D', 'J'}, {722, 764}},    // DIN3
      {{'J', 'M'}, {765, 807}}, {{'M', 'H'}, {807, 849}},    //
      {{'G', 'B'}, {850, 892}}, {{'B', 'E'}, {892, 934}},    //
      {{'E', 'C'}, {935, 977}}, {{'C', 'F'}, {977, 1019}}};  //

  Connection Graph[vertices] = {{3, {'B', 'C', 'D'}},       // A
                                {4, {'A', 'G', 'H', 'E'}},  // B
                                {4, {'A', 'E', 'I', 'F'}},  // C
                                {4, {'A', 'F', 'J', 'G'}},  // D
                                {3, {'B', 'K', 'C'}},       // E
                                {3, {'C', 'L', 'D'}},       // F
                                {3, {'D', 'M', 'B'}},       // G
                                {3, {'M', 'B', 'K'}},       // H
                                {3, {'K', 'C', 'L'}},       // I
                                {3, {'L', 'D', 'M'}},       // J
                                {4, {'H', 'E', 'I', 'N'}},  // K
                                {4, {'I', 'F', 'J', 'N'}},  // L
                                {4, {'J', 'G', 'H', 'N'}},  // M
                                {3, {'K', 'L', 'M'}}};      // N

  Dodecahedron() {
    for (int i = 0; i < edges; i++) {
      Edges[i].node[0] -= 'A';
      Edges[i].node[1] -= 'A';
    }
    for (int i = 0; i < vertices; i++)
      for (int j = 0; j < Graph[i].faces; j++) {
        Graph[i].nodes[j] -= 'A';
      }
  }

  void wisp(Wisp& w) {
    w.position++;
    if (w.position > Edges[w.edge].led[1] - Edges[w.edge].led[0]) {
      w.position = 0;
      // Arrived at current node.
      uint8_t current_node = Edges[w.edge].node[1 - w.from];
      // Arrived from previous node
      uint8_t previous_node = Edges[w.edge].node[w.from];
      // Going from current node to future node
      uint8_t future_node = previous_node;
      while (future_node == previous_node) {
        future_node =
            Graph[current_node].nodes[random(0, Graph[current_node].faces)];
      }
      // find an edge going from current to future or visa versa
      for (int i = 0; i < edges; i++) {
        if ((Edges[i].node[0] == current_node) &&
            (Edges[i].node[1] == future_node)) {
          w.edge = i;
          w.from = 0;
          break;
        }
        if ((Edges[i].node[0] == future_node) &&
            (Edges[i].node[1] == current_node)) {
          w.edge = i;
          w.from = 1;
          break;
        }
      }
    }
    // Draw the current led
    uint16_t led = Edges[w.edge].led[w.from];
    if (w.from == 0) {
      led += w.position;
    } else {
      led -= w.position;
    }
    leds[led] = w.color;
    leds[led + 1020] = w.color;
  }
};

void setup() {
  Serial.begin(115200);
  Serial.println("Booting");

  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);
  while (WiFi.waitForConnectResult() != WL_CONNECTED) {
    Serial.println("Connection Failed! Rebooting...");
    delay(5000);
    ESP.restart();
  }

  // Port defaults to 3232
  ArduinoOTA.setPort(3232);
  // Hostname defaults to esp3232-[MAC]
  ArduinoOTA.setHostname(hostname);

  // No authentication by default
  // ArduinoOTA.setPassword("admin");
  // Password can be set with it's md5 value as well
  // MD5(admin) = 21232f297a57a5a743894a0e4a801fc3
  // ArduinoOTA.setPasswordHash("21232f297a57a5a743894a0e4a801fc3");

  ArduinoOTA
      .onStart([]() {
        String type;
        if (ArduinoOTA.getCommand() == U_FLASH)
          type = "sketch";
        else  // U_SPIFFS
          type = "filesystem";

        // NOTE: if updating SPIFFS this would be the place to unmount SPIFFS
        // using SPIFFS.end()
        Serial.println("Start updating " + type);
      })
      .onEnd([]() { Serial.println("\nEnd"); })
      .onProgress([](unsigned int progress, unsigned int total) {
        Serial.printf("Progress: %u%%\r", (progress / (total / 100)));
      })
      .onError([](ota_error_t error) {
        Serial.printf("Error[%u]: ", error);
        if (error == OTA_AUTH_ERROR)
          Serial.println("Auth Failed");
        else if (error == OTA_BEGIN_ERROR)
          Serial.println("Begin Failed");
        else if (error == OTA_CONNECT_ERROR)
          Serial.println("Connect Failed");
        else if (error == OTA_RECEIVE_ERROR)
          Serial.println("Receive Failed");
        else if (error == OTA_END_ERROR)
          Serial.println("End Failed");
      });

  ArduinoOTA.begin();

  Serial.println("Ready");
  Serial.print("IP address: ");
  Serial.println(WiFi.localIP());

  FastLED.addLeds<WS2812, A1_PIN, GRB>(leds, 0 * PIXELS, PIXELS);
  FastLED.addLeds<WS2812, A2_PIN, GRB>(leds, 1 * PIXELS, PIXELS);
  FastLED.addLeds<WS2812, A3_PIN, GRB>(leds, 2 * PIXELS, PIXELS);

  FastLED.addLeds<WS2812, A7_PIN, GRB>(leds, 3 * PIXELS, PIXELS);
  FastLED.addLeds<WS2812, A5_PIN, GRB>(leds, 4 * PIXELS, PIXELS);
  FastLED.addLeds<WS2812, A6_PIN, GRB>(leds, 5 * PIXELS, PIXELS);
  FastLED.setBrightness(255);
  FastLED.setDither(DISABLE_DITHER);

  pinMode(RELAY_PIN, OUTPUT);
  digitalWrite(RELAY_PIN, HIGH);

  setupDodecahedron();
}

Dodecahedron dodecahedron;
Dodecahedron::Wisp wisps[100];
void createwisps();
uint8_t queryHue(CRGB&, String);
void setupDodecahedron() { createwisps(); }

void createwisps() {
  for (int i = 0; i < 50; i++) {
    wisps[i].edge = random(0, Dodecahedron::edges);
    wisps[i].position = random(0, 42);
    wisps[i].from = random(0, 2);
    wisps[i].color = CRGB(random(255), random(255), random(255));
  };
  wisps[0].color = CRGB(255, 150, 30);
  wisps[1].color = CRGB(255, 150, 30);
}

void loop() {
  ArduinoOTA.handle();
  EVERY_N_MILLISECONDS(5000) {
    // See status of 5 HUE lights
    uint8_t lights_on = 0;
    lights_on += queryHue(wisps[0].color, "37");
    lights_on += queryHue(wisps[1].color, "38");
    lights_on += queryHue(wisps[2].color, "39");
    lights_on += queryHue(wisps[3].color, "40");
    lights_on += queryHue(wisps[4].color, "41");
    if (lights_on == 0) {
      digitalWrite(RELAY_PIN, LOW);
    } else {
      digitalWrite(RELAY_PIN, HIGH);
    }
  }
  EVERY_N_MILLISECONDS(30) {
    for (int i = 0; i < 5; i++) {
      dodecahedron.wisp(wisps[i]);
    }
  }
  fadeToBlackBy(leds, PIXELS * 6, 1);
  FastLED.show();
}

uint8_t queryHue(CRGB& color, String light) {
  // Lights are off unless wifi states they are on
  uint8_t light_on = 0;
  if (WiFi.status() == WL_CONNECTED) {
    HTTPClient http;
    String serverPath =
        "http://192.168.178.22/api/"
        "Mn0hooRxdFRet5wIpdNaNDY2y8tJHtRV6PWT2IZK/lights/" +
        light;
    http.begin(serverPath.c_str());
    int httpResponseCode = http.GET();

    if (httpResponseCode > 0) {
      Serial.print("HTTP Response code: ");
      Serial.println(httpResponseCode);
      String payload = http.getString();
      DynamicJsonDocument doc(4096);
      DeserializationError err = deserializeJson(doc, payload);
      if (err) {
        Serial.printf("Deserialization error: %s\n", err.c_str());
      } else {
        light_on = doc["state"]["on"];
        // uint8_t bri = doc["state"]["bri"];
        uint16_t hue = doc["state"]["hue"];
        uint8_t sat = doc["state"]["sat"];
        color = CHSV(hue >> 8, sat, 255);
      }
    } else {
      Serial.print("Error code: ");
      Serial.println(httpResponseCode);
    }
    // Free resources
    http.end();
  }
  return light_on;
}